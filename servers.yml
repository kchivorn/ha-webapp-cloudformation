Description: Chivorn / Server / Deploy High Availability Web App Cloud Formation

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to
    Type: String
  S3CodeFolder:
    Description: Full S3 path and file name of zipped file
    Type: String
    Default: "s3://udacity-demo-1/udacity.zip"
  WebAppMinSize:
    Description: Web App min size
    Type: String
    Default: "3"
  WebAppMaxSize:
    Description: Web App max size
    Type: String
    Default: "5"
  KeyName:
    Description: Name of key-pair (PEM) file.
    Type: String
    Default: "udacity_demo"
  BastionImageId:
    Description: Image id used for bastion servers
    Type: String
    Default: "ami-0d5eff06f840b45e9"
  WebServerImageId:
    Description: Image id used for bastion servers
    Type: String
    Default: "ami-09e67e426f25ce0d7"
Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Load Balancer Security Group

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Web Server Security Group

  BastionSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from local
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Bastion Security Group

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          mkdir /var/www
          mkdir /var/www/html
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip

      ImageId: !Ref WebServerImageId
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref S3BucketInstanceProfile
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: t3.small
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${EnvironmentName}-VPCID

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PRI-NETS
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: !Ref WebAppMinSize
      MaxSize: !Ref WebAppMaxSize
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN
      SecurityGroups:
        - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

  PublicSubnet1Bastion:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref BastionImageId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SubnetId:
        Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
      AvailabilityZone: !Select [0, !GetAZs ""]
      SecurityGroupIds:
        - Ref: BastionSecGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host 1

  PublicSubnet2Bastion:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref BastionImageId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SubnetId:
        Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN
      AvailabilityZone: !Select [1, !GetAZs ""]
      SecurityGroupIds:
        - Ref: BastionSecGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host 2

  S3BucketInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: S3BucketRole

  S3BucketRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  S3BucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3BucketsPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:*
            Resource: "*"
      Roles:
        - Ref: S3BucketRole

Outputs:
  LoadBalancerDNSName:
    Description: DNS Name of the load balancer (application)
    Value: !Join ["", ["http://", !GetAtt WebAppLoadBalancer.DNSName]]
    Export:
      Name: !Sub "${EnvironmentName}-DNS-NAME"

  BastionHostIPPublicSubnet1:
    Description: IP address of bastion host in public subnet 1
    Value: !GetAtt PublicSubnet1Bastion.PublicIp
    Export:
      Name: !Sub "${EnvironmentName}-BASTION-HOST-1"

  BastionHostIPPublicSubnet2:
    Description: IP address of bastion host in public subnet 2
    Value: !GetAtt PublicSubnet2Bastion.PublicIp
    Export:
      Name: !Sub "${EnvironmentName}-BASTION-HOST-2"
